generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id
  email             String          @unique
  firstName         String
  lastName          String
  role              String          @default("user")
  isSubscribed      Boolean         @default(false)
  subscriptionEnds  DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  todos             Todo[]
  products          Product[]
  salesRequests     SalesRequest[]
  transactions      Transaction[]
  notifications     Notification[]
}

model Todo {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String         @id @default(cuid())
  name        String
  sku         String         @unique
  description String?
  category    String
  material    String
  price       Float
  stock       Int
  lowStockThreshold Int      @default(10)
  imageUrl    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  salesItems  SalesItem[]
}

model SalesRequest {
  id           String      @id @default(cuid())
  requestId    String      @unique // Format: SR-YYYY-XXXX
  customer     String
  totalValue   Float
  status       String      @default("Pending") // Pending, Approved, Rejected
  requestDate  DateTime    @default(now())
  items        SalesItem[]
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model SalesItem {
  id             String       @id @default(cuid())
  quantity       Int
  price          Float
  product        Product?     @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId      String?
  productName    String?      // Store product name for historical reference
  productSku     String?      // Store product SKU for historical reference
  salesRequest   SalesRequest @relation(fields: [salesRequestId], references: [id])
  salesRequestId String
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // 'request', 'status_update', etc.
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model for storing completed transactions
model Transaction {
  id          String    @id @default(cuid())
  orderId     String    @unique // Will use the SalesRequest's requestId
  customer    String
  totalAmount Float
  items       Json      // Store array of items with product details
  status      String    @default("Completed")
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([createdAt])
  @@index([userId])
}

// New model for sales analytics
model SalesAnalytics {
  id              String   @id @default(cuid())
  date            DateTime
  totalRevenue    Float
  totalOrders     Int
  avgOrderValue   Float
  productId       String
  productName     String
  category        String
  quantity        Int
  revenue         Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([date])
  @@index([category])
  @@index([productId])
}